{"ast":null,"code":"/*\r\n    This is our http api, which we use to send requests to\r\n    our back-end API. Note we're using the Axios library\r\n    for doing this, which is an easy to use AJAX-based\r\n    library. We could (and maybe should) use Fetch, which\r\n    is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it's a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:4000/api'\n}); // THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n\nexport const getAllPlaylists = () => api.get(`/playlists`);\nexport const getPlaylistPairs = () => api.get('playlistpairs');\nexport const getPlaylistById = playlistID => api.get(`/playlist/${playlistID}`);\nexport const createPlaylist = newPlaylist => api.post('/playlist', newPlaylist); // export const deletePlaylist = (playlistID) => api.delete(`/playlist/${playlistID}`)\n\nexport const editPlaylist = (playlistID, newName) => api.put(`/playlist/${playlistID}`, newName);\nexport const createSong = (playlistID, newSong) => api.post(`/playlist/${playlistID}`, newSong);\nexport const deleteSong = (playlistID, songID) => api.post(`/playlist/${playlistID}/${songID}`);\nexport const editSong = songID => api.put();\nconst apis = {\n  getAllPlaylists,\n  getPlaylistPairs,\n  getPlaylistById,\n  createPlaylist,\n  // deletePlaylist,\n  editPlaylist,\n  createSong,\n  deleteSong,\n  editSong\n};\nexport default apis;","map":{"version":3,"names":["axios","api","create","baseURL","getAllPlaylists","get","getPlaylistPairs","getPlaylistById","playlistID","createPlaylist","newPlaylist","post","editPlaylist","newName","put","createSong","newSong","deleteSong","songID","editSong","apis"],"sources":["C:/Users/huifu/OneDrive/Desktop/School Stuff/CSE316/HW3/Playlister_HW3/client/src/api/index.js"],"sourcesContent":["/*\r\n    This is our http api, which we use to send requests to\r\n    our back-end API. Note we're using the Axios library\r\n    for doing this, which is an easy to use AJAX-based\r\n    library. We could (and maybe should) use Fetch, which\r\n    is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it's a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\nimport axios from 'axios'\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:4000/api',\r\n})\r\n\r\n// THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\r\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\r\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\r\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\r\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\r\n// CUSTOM FILTERS FOR QUERIES\r\nexport const getAllPlaylists = () => api.get(`/playlists`)\r\nexport const getPlaylistPairs = () => api.get('playlistpairs')\r\nexport const getPlaylistById = (playlistID) => api.get(`/playlist/${playlistID}`)\r\n\r\nexport const createPlaylist = (newPlaylist) => api.post('/playlist', newPlaylist)\r\n// export const deletePlaylist = (playlistID) => api.delete(`/playlist/${playlistID}`)\r\nexport const editPlaylist = (playlistID, newName) => api.put(`/playlist/${playlistID}`, newName)\r\n\r\nexport const createSong = (playlistID, newSong) => api.post(`/playlist/${playlistID}`, newSong)\r\nexport const deleteSong = (playlistID, songID) => api.post(`/playlist/${playlistID}/${songID}`)\r\nexport const editSong = (songID) => api.put()\r\n\r\nconst apis = {\r\n    getAllPlaylists,\r\n    getPlaylistPairs,\r\n    getPlaylistById,\r\n    createPlaylist,\r\n    // deletePlaylist,\r\n    editPlaylist,\r\n    createSong,\r\n    deleteSong,\r\n    editSong,\r\n}\r\n\r\nexport default apis\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;EACrBC,OAAO,EAAE;AADY,CAAb,CAAZ,C,CAIA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAMH,GAAG,CAACI,GAAJ,CAAS,YAAT,CAA9B;AACP,OAAO,MAAMC,gBAAgB,GAAG,MAAML,GAAG,CAACI,GAAJ,CAAQ,eAAR,CAA/B;AACP,OAAO,MAAME,eAAe,GAAIC,UAAD,IAAgBP,GAAG,CAACI,GAAJ,CAAS,aAAYG,UAAW,EAAhC,CAAxC;AAEP,OAAO,MAAMC,cAAc,GAAIC,WAAD,IAAiBT,GAAG,CAACU,IAAJ,CAAS,WAAT,EAAsBD,WAAtB,CAAxC,C,CACP;;AACA,OAAO,MAAME,YAAY,GAAG,CAACJ,UAAD,EAAaK,OAAb,KAAyBZ,GAAG,CAACa,GAAJ,CAAS,aAAYN,UAAW,EAAhC,EAAmCK,OAAnC,CAA9C;AAEP,OAAO,MAAME,UAAU,GAAG,CAACP,UAAD,EAAaQ,OAAb,KAAyBf,GAAG,CAACU,IAAJ,CAAU,aAAYH,UAAW,EAAjC,EAAoCQ,OAApC,CAA5C;AACP,OAAO,MAAMC,UAAU,GAAG,CAACT,UAAD,EAAaU,MAAb,KAAwBjB,GAAG,CAACU,IAAJ,CAAU,aAAYH,UAAW,IAAGU,MAAO,EAA3C,CAA3C;AACP,OAAO,MAAMC,QAAQ,GAAID,MAAD,IAAYjB,GAAG,CAACa,GAAJ,EAA7B;AAEP,MAAMM,IAAI,GAAG;EACThB,eADS;EAETE,gBAFS;EAGTC,eAHS;EAITE,cAJS;EAKT;EACAG,YANS;EAOTG,UAPS;EAQTE,UARS;EASTE;AATS,CAAb;AAYA,eAAeC,IAAf"},"metadata":{},"sourceType":"module"}